// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(55)
  email      String   @unique @db.VarChar(55)
  password   String   @db.VarChar(191)
  orders     Order[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(55)
  products   Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(55)
  description String      @db.VarChar(55)
  price       Float
  category_id Int
  category    Category    @relation(fields: [category_id], references: [id])
  order_items OrderItem[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  @@map("products")
}

model Order {
  id          Int         @id @default(autoincrement())
  user_id     Int
  user        User        @relation(fields: [user_id], references: [id])
  order_items OrderItem[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order_id   Int
  order      Order    @relation(fields: [order_id], references: [id])
  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  amount     Int
  price      Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("order_items")
}
